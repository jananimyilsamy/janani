mport java.lang.*;
import java.util.Stack; 
import java.util.*;
class Main 
{ 
	
	static int Prec(char ch) 
	{ 
		switch (ch) 
		{ 
		case '+': return 1; 
		case '-': return 1; 
	
		case '*': return 2; 
		case '/': return 2; 
	
		case '^': return 3; 
		} 
		return -1; 
	} 
	
	
	static String infixToPostfix(String exp) 
	{ 
		
		String result = new String(""); 
		
		Stack<Character> stack = new Stack<>(); 
		
		for (int i = 0; i<exp.length(); ++i) 
		{ 
			char c = exp.charAt(i); 
			
			 
			if (Character.isLetterOrDigit(c)) 
				result += c; 
			
			
			else if (c == '(') 
				stack.push(c); 
			
		
			else if (c == ')') 
			{ 
				while (!stack.empty() && stack.peek() != '(') 
					result += stack.pop(); 
				
				if (!stack.empty() && stack.peek() != '(') 
					return "Invalid Expression"; 			 
				else
					stack.pop(); 
			} 
			else 
			{ 
				while (!stack.empty() && Prec(c) <= Prec(stack.peek())){ 
					if(stack.peek() == '(') 
						return "Invalid Expression"; 
					result += stack.pop(); 
			} 
				stack.push(c); 
			} 
	
		} 

		while (!stack.empty()){ 
			if(stack.peek() == '(') 
				return "Invalid Expression"; 
			result += stack.pop(); 
		} 
		return result; 
	} 
	
	
	public static void main(String[] args) throws java.lang.Exception
	{ 
	    Scanner sc = new Scanner(System.in);
	    int t = sc.nextInt();
	    int i=1;
	   while(i<=t)
	    {
	        	String expression = sc.next(); 
	        	System.out.println(infixToPostfix(expression));
	        i++;
	        
	    }
	
	 
	} 
} 
